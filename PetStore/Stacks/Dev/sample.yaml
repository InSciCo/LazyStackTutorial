AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  HttpApiSecure:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Dev
      Auth:
        Authorizers:
          OpenIdAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
              - Ref: UserPoolClient
        DefaultAuthorizer: OpenIdAuthorizer
  ApiSecure:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiSecure
      StageName: Dev
      Auth:
        DefaultAuthorizer: AWS_IAM
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
      - email
      - preferred_username
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
      - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
      - COGNITO
      GenerateSecret: false
      AllowedOAuthFlows:
      - code
      RefreshTokenValidity: 30
      CallbackURLs:
      - https://www.example.com
      LogoutURLs:
      - https://www.example.com
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - aws.cognito.signin.user.admin
      - profile
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Fn::Sub: ${AWS::StackName}-IdentityPool
      AllowUnauthenticatedIdentities: false
      AllowClassicFlow: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt: UserPool.ProviderName
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: AuthRole.Arn
  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-AuthRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Federated: 'cognito-identity.amazonaws.com'
          Action:
          - 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud':
                Ref: IdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-AuthPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'mobileanalytics:PutEvents'
            - 'cognito-sync:*'
            - 'cognito-identity:*'
            Resource: '*'
          - Effect: 'Allow'
            Action:
            - 'execute-api:Invoke'
            Resource:
              Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiSecure}/*

  LZDDB01:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: SK1
        AttributeType: S
      - AttributeName: SK2
        AttributeType: S
      - AttributeName: SK3
        AttributeType: S
      - AttributeName: SK4
        AttributeType: S
      - AttributeName: SK5
        AttributeType: S
      - AttributeName: GSI1PK
        AttributeType: S
      - AttributeName: GSI1SK
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      LocalSecondaryIndexes:
      - IndexName: PK-SK1-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK1
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK2-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK2
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK3-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK3
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK4-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK4
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      - IndexName: PK-SK5-Index
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK5
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      GlobalSecondaryIndexes:
      - IndexName: GSI1
        KeySchema:
        - AttributeName: GSI1PK
          KeyType: HASH
        - AttributeName: GSI1SK
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - Status
          - UpdateUtcTick
          - CreateUtcTick
          - General
          ProjectionType: INCLUDE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName:
        Fn::Sub: ${AWS::StackName}-DB
  Pet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-Pet
      CodeUri: ../../Lambdas/Pet/bin/Debug/netcoreapp3.1
      Handler: Pet::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Description: Pet
      Runtime: dotnetcore3.1
      MemorySize: 512
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName:
            Ref: LZDDB01
      Environment:
        Variables:
          TABLE_NAME:
            Ref: LZDDB01
          TABLE_ARN:
            Fn::GetAtt: LZDDB01.Arn
      Events:
        FindPetsByStatus:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet/findByStatus
            Method: GET
        GetPetById:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet/{petId}
            Method: GET
        GetPetCategories:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet/categories
            Method: GET
        GetPetTags:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet/tags
            Method: GET
        FindPetsByTags:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet/findByTags
            Method: GET
        SeedPets:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet/seedPets
            Method: GET
    MetaData:
      ApiEventsGeneration: true
  PetSecure:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-PetSecure
      CodeUri: ../../Lambdas/PetSecure/bin/Debug/netcoreapp3.1
      Handler: PetSecure::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Description: PetSecure
      Runtime: dotnetcore3.1
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName:
            Ref: LZDDB01
      Environment:
        Variables:
          TABLE_NAME:
            Ref: LZDDB01
          TABLE_ARN:
            Fn::GetAtt: LZDDB01.Arn
      Events:
        AddPet:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet
            Method: POST
        UpdatePet:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet
            Method: PUT
        UpdatePetWithForm:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet/{petId}
            Method: POST
        DeletePet:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /pet/{petId}
            Method: DELETE
    MetaData:
      ApiEventsGeneration: true
  Order:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-Order
      CodeUri: ../../Lambdas/Order/bin/Debug/netcoreapp3.1
      Handler: Order::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Description: Order
      Runtime: dotnetcore3.1
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName:
            Ref: LZDDB01
      Environment:
        Variables:
          TABLE_NAME:
            Ref: LZDDB01
          TABLE_ARN:
            Fn::GetAtt: LZDDB01.Arn
      Events:
        PlaceOrder:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /order
            Method: POST
        GetOrderById:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApiSecure
            Path: /order/{orderId}
            Method: GET
    MetaData:
      ApiEventsGeneration: true
  OrderSecure:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-OrderSecure
      CodeUri: ../../Lambdas/OrderSecure/bin/Debug/netcoreapp3.1
      Handler: OrderSecure::LambdaFunc.LambdaEntryPoint::FunctionHandlerAsync
      Description: OrderSecure
      Runtime: dotnetcore3.1
      MemorySize: 256
      Timeout: 30
      Tracing: Active
      Policies:
      - AWSXrayWriteOnlyAccess
      - DynamoDBCrudPolicy:
          TableName:
            Ref: LZDDB01
      Environment:
        Variables:
          TABLE_NAME:
            Ref: LZDDB01
          TABLE_ARN:
            Fn::GetAtt: LZDDB01.Arn
      Events:
        GetInventory:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiSecure
            Path: /order/inventory
            Method: GET
            Auth:
              InvokeRole: NONE
        DeleteOrder:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiSecure
            Path: /order/{orderId}
            Method: DELETE
            Auth:
              InvokeRole: NONE
    MetaData:
      ApiEventsGeneration: true
